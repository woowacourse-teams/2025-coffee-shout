import { reportWebsocketError } from '@/apis/utils/reportSentryError';
import { useIdentifier } from '@/contexts/Identifier/IdentifierContext';
import { Client, IFrame } from '@stomp/stompjs';
import { PropsWithChildren, useCallback, useEffect, useRef, useState } from 'react';
import { createStompClient } from '../createStompClient';
import { usePageVisibility } from '../hooks/usePageVisibility';
import { WebSocketContext, WebSocketContextType } from './WebSocketContext';

type WebSocketSuccess<T> = {
  success: true;
  data: T;
  errorMessage: null;
};

type WebSocketError = {
  success: false;
  data: null;
  errorMessage: string;
};

type WebSocketMessage<T> = WebSocketSuccess<T> | WebSocketError;

export const WebSocketProvider = ({ children }: PropsWithChildren) => {
  const [client, setClient] = useState<Client | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const isVisible = usePageVisibility();
  const wasConnectedBeforeBackground = useRef(true);
  const reconnectTimeoutRef = useRef<number | null>(null);
  const reconnectAttemptsRef = useRef(0);
  const maxReconnectAttempts = 3;
  const { joinCode, myName, menuId } = useIdentifier();

  const startSocket = useCallback(
    (joinCode: string, myName: string, menuId: number) => {
      if (client && isConnected) {
        return;
      }

      // joinCodeÏôÄ myNameÏù¥ Ïú†Ìö®Ìïú Í∞íÏù∏ÏßÄ ÌôïÏù∏
      if (!joinCode || !myName || !menuId) {
        console.log('‚ö†Ô∏è WebSocket Ïó∞Í≤∞ ÏãúÎèÑ Í±¥ÎÑàÎúÄ: joinCode, myName, menuId Í∞Ä ÏóÜÏùå');
        return;
      }

      const stompClient = createStompClient(joinCode, myName, menuId);

      stompClient.onConnect = () => {
        setIsConnected(true);
        reconnectAttemptsRef.current = 0;
        wasConnectedBeforeBackground.current = false;
        console.log('‚úÖWebSocket Ïó∞Í≤∞');
      };

      stompClient.onDisconnect = () => {
        setIsConnected(false);
        console.log('‚ùåWebSocket Ïó∞Í≤∞ Ìï¥Ï†ú');
      };

      stompClient.onStompError = (frame: IFrame) => {
        const errorDetails = {
          command: frame.command,
          message: frame.headers['message'] || 'Ïïå Ïàò ÏóÜÎäî STOMP Ïò§Î•ò',
          body: frame.body,
        };

        const errorMessage = `STOMP Ïò§Î•ò [${errorDetails.command}]: ${errorDetails.message}`;
        console.error('‚ùå', errorMessage, errorDetails);

        reportWebsocketError(errorMessage, {
          type: 'stomp',
          extra: { errorDetails },
        });

        setIsConnected(false);
      };

      stompClient.onWebSocketError = (event) => {
        const errorMessage = `WebSocket Ïó∞Í≤∞ Ïò§Î•ò: ${event.type}`;
        console.error('‚ùå', errorMessage);

        reportWebsocketError(errorMessage, {
          type: 'connection',
          extra: {
            eventType: event.type,
            url: stompClient.webSocket?.url,
            readyState: stompClient.webSocket?.readyState,
          },
        });

        setIsConnected(false);
      };

      setClient(stompClient);
      stompClient.activate();
    },
    [client, isConnected]
  );

  const stopSocket = useCallback(() => {
    if (!client || !isConnected) {
      return;
    }

    client.deactivate();
    setIsConnected(false);
  }, [client, isConnected]);

  const subscribe = <T,>(url: string, onData: (data: T) => void) => {
    if (!client || !isConnected) {
      const errorMessage = `Íµ¨ÎèÖ Ïã§Ìå® (${url}): WebSocket Ïó∞Í≤∞ ÏïàÎê®`;
      reportWebsocketError(errorMessage, {
        type: 'subscription',
        extra: { url, isConnected, hasClient: !!client },
      });
      throw new Error('‚ùå ' + errorMessage);
    }

    const requestUrl = '/topic' + url;

    return client.subscribe(requestUrl, (message) => {
      try {
        const parsedMessage = JSON.parse(message.body) as WebSocketMessage<T>;
        const isSuccess = parsedMessage.success;

        if (!isSuccess) {
          const errorMessage = `Íµ¨ÎèÖ Î©îÏãúÏßÄ Ïò§Î•ò (${url}): ${parsedMessage.errorMessage}`;
          reportWebsocketError(errorMessage, {
            type: 'subscription',
            extra: { url, messageBody: message.body },
          });
          throw new Error(parsedMessage.errorMessage);
        }

        const data = parsedMessage.data as T;

        onData(data);
      } catch (error) {
        const errorMessage = `JSON ÌååÏã± Ïã§Ìå® (${url}): ${error instanceof Error ? error.message : String(error)}`;
        console.error('‚ùå', errorMessage);
        reportWebsocketError(errorMessage, {
          type: 'parsing',
          extra: { url, messageBody: message.body, originalError: String(error) },
        });
      }
    });
  };

  const send = <T,>(url: string, body?: T) => {
    if (!client || !isConnected) {
      const errorMessage = `Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå® (${url}): WebSocket Ïó∞Í≤∞ ÏïàÎê®`;
      console.warn('‚ùå', errorMessage);
      reportWebsocketError(errorMessage, {
        type: 'send',
        extra: { url, isConnected, hasClient: !!client },
      });
      return;
    }

    const requestUrl = '/app' + url;

    try {
      let payload: string;
      if (body == null) {
        payload = '';
      } else if (typeof body === 'object') {
        payload = JSON.stringify(body);
      } else {
        payload = String(body);
      }

      client.publish({
        destination: requestUrl,
        body: payload,
      });
    } catch (error) {
      const errorMessage = `Î©îÏãúÏßÄ Ï†ÑÏÜ° Ï§ë Ïò§Î•ò (${url}): ${error instanceof Error ? error.message : String(error)}`;
      console.error('‚ùå', errorMessage);
      reportWebsocketError(errorMessage, {
        type: 'send',
        extra: { url, body: String(body), originalError: String(error) },
      });
    }
  };

  // Ïï± Ï†ÑÌôò Í∞êÏßÄ Î∞è Ïû¨Ïó∞Í≤∞ Î°úÏßÅ
  useEffect(() => {
    if (!isVisible) {
      if (isConnected) {
        wasConnectedBeforeBackground.current = true;
        console.log(`üì± Ïï±Ïù¥ Î∞±Í∑∏ÎùºÏö¥ÎìúÎ°ú Ï†ÑÌôòÎê® - ÏõπÏÜåÏºì Ïó∞Í≤∞ Ìï¥Ï†ú`);
        stopSocket();
      }
    } else {
      // Ïï±Ïù¥ Ìè¨Í∑∏ÎùºÏö¥ÎìúÎ°ú Ï†ÑÌôòÎê®
      if (wasConnectedBeforeBackground.current) {
        // ÏµúÎåÄ Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ ÌöüÏàò Ï≤¥ÌÅ¨
        if (reconnectAttemptsRef.current >= maxReconnectAttempts) {
          console.log(`‚ùå ÏµúÎåÄ Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ ÌöüÏàò Ï¥àÍ≥º (${maxReconnectAttempts}Ìöå) - Ïû¨Ïó∞Í≤∞ Ï§ëÎã®`);
          wasConnectedBeforeBackground.current = false;
          return;
        }

        console.log(
          `üì± Ïï±Ïù¥ Ìè¨Í∑∏ÎùºÏö¥ÎìúÎ°ú Ï†ÑÌôòÎê® - ÏõπÏÜåÏºì Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ (ÏãúÎèÑ: ${reconnectAttemptsRef.current + 1}/${maxReconnectAttempts})`
        );

        // Í∏∞Ï°¥ Ïû¨Ïó∞Í≤∞ ÌÉÄÏù¥Î®∏Í∞Ä ÏûàÎã§Î©¥ Ï†úÍ±∞
        if (reconnectTimeoutRef.current) {
          clearTimeout(reconnectTimeoutRef.current);
        }

        // 1Ï¥à ÏßÄÏó∞ ÌõÑ Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ
        reconnectTimeoutRef.current = window.setTimeout(() => {
          console.log(`üîÑ ÏõπÏÜåÏºì Ïû¨Ïó∞Í≤∞ ÏãúÏûë`);
          reconnectAttemptsRef.current += 1;
          startSocket(joinCode, myName, menuId);
        }, 1000);
      }
    }

    // cleanup
    return () => {
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
      }
    };
  }, [isVisible, isConnected, startSocket, stopSocket, joinCode, myName, menuId]);

  const contextValue: WebSocketContextType = {
    startSocket,
    stopSocket,
    subscribe,
    send,
    isConnected,
    isVisible,
    client,
  };

  return <WebSocketContext.Provider value={contextValue}>{children}</WebSocketContext.Provider>;
};
